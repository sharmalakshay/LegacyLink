<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>LegacyLink</title>
    <link rel="stylesheet" href="/css/bootstrap.min.css">
    <script src="/js/bootstrap.min.js" defer></script>
    <link rel="stylesheet" href="/css/dashboard.css">
    <script src="/js/dashboard.js" defer></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <link rel="stylesheet" type="text/css" href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js"></script>
</head>

<body>
    <% if (typeof displayMessage != 'undefined') { %>
        <script>alert(unescape('<%= escape(displayMessage) %>'));</script>
    <% } %>

    <%- include('header') %>

    <nav id="dashboard-nav">
        <h1>
            Welcome, <span id="username"><%= user.username %></span>
        </h1>
        <span>
            Your password-protected profile can be viewed at:
            <a target="_blank" href="<%= process.env.SITE_ADDRESS %>/<%= user.username %>"><%= process.env.SITE_ADDRESS %>/<%= user.username %></a>
        </span>
        <button onclick="logout()" id="logout-button">Logout</button>
        <button onclick="openModal()" id="settings-button">Settings</button>
    </nav>
    
    <!-- Settings Modal -->
    <div id="settings" class="modal">
        <div class="modal-content">
            <div id="settings-nav">
                <ul>
                    <li><a href="#change-password">Change Password</a></li>
                    <li><a href="#account-settings">Account Settings</a></li>
                    <!-- <li><a href="#privacy-settings">Privacy Settings</a></li> -->
                    <li><a href="#preferences">Preferences</a></li>
                </ul>
            </div>
            <div id="settings-content">

                <div id="account-settings" class="tab-content">
                    <h2>Account Settings</h2>
                    <form id="account-settings-form">
                        <div class="form-group">
                            <label for="username_edit">Username</label><br>
                            <input class="form-control" type="text" id="username_edit" value="<%= user.username %>" disabled>
                        </div>
                        <div class="form-group">
                            <label for="email">Email</label><br>
                            <input class="form-control" type="email" id="email" value="<%= user.email %>" disabled>
                        </div>
                        <!-- <button type="button" onclick="editAccount()" class="save-button">Save</button> -->
                    </form>
                </div>

                <div id="privacy-settings" class="tab-content">
                    <h2>Privacy Settings</h2>
                    <form id="privacy-settings-form">
                        <div class="form-group">
                            <label for="visibility">Visibility</label><br>
                            <select class="form-control" id="visibility" disabled>
                                <option value="public" <%= user.visibility === 'public' ? 'selected' : '' %>>Public</option>
                                <option value="private" <%= user.visibility === 'private' ? 'selected' : '' %>>Private</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label for="password">Password</label><br>
                            <input class="form-control" type="password" id="password" disabled>
                        </div>
                        <button type="button" onclick="editPrivacy()" class="save-button">Save</button>
                    </form>
                </div>
                
                <div id="preferences" class="tab-content">
                    <h2>Preferences</h2>
                    <form id="preferences-form">
                        <div class="form-group">
                            <label for="theme">Theme</label><br>
                            <select class="form-control" id="theme" disabled>
                                <option value="light" <%= user.theme === 'light' ? 'selected' : '' %>>Light</option>
                                <option value="dark" <%= user.theme === 'dark' ? 'selected' : '' %>>Dark</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label for="language">Language</label><br>
                            <select class="form-control" id="language" disabled>
                                <option value="english" <%= user.language === 'english' ? 'selected' : '' %>>English</option>
                                <option value="spanish" <%= user.language === 'spanish' ? 'selected' : '' %>>Spanish</option>
                            </select>
                        </div>
                        <!-- <button type="button" onclick="editPreferences()" class="save-button">Save</button> -->
                    </form>
                </div>
                
                <div id="change-password" class="tab-content">
                    <h2>Change Password</h2>
                    <form id="change-password-form" onsubmit="changePassword()">
                        <div class="form-group">
                            <label for="current-password">Current Password</label><br>
                            <input class="form-control" type="password" id="current-password" required>
                        </div>
                        <div class="form-group">
                            <label for="new-password">New Password</label><br>
                            <input class="form-control" type="password" id="new-password" required>
                        </div>
                        <div class="form-group">
                            <label for="confirm-password">Confirm Password</label><br>
                            <input class="form-control" type="password" id="confirm-password" required>
                        </div>
                        <button type="submit" class="save-button">Change</button>
                    </form>
                </div>

            </div>
        </div>
    </div>

    <!-- List of Names and Messages -->
    <div id="message-list">
        <table class="table borderless">
            <colgroup>
                <col style="width: 20%">
                <col style="width: 60%">
                <col style="width: 20%">
            </colgroup>
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Messages</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                <% if (user.names.length === 0) { %>
                    <tr>
                        <td colspan="3">No Names stored</td>
                    </tr>
                <% } else { %>
                    <% nameAndMsgs.forEach((nameAndMsg, index) => { %>
                        <tr class="name_row" id="<%= nameAndMsg.id %>">
                            <td><a href='#!' onclick="" class="name-in-list"><h5><%= nameAndMsg.name %></h5></a></td>
                            <td>
                                <table class="table table-borderless mb-0 table-sm table-hover">
                                    <tr>
                                        <td class="text-center" style="cursor: pointer;" onclick="add_msg(this, '<%= nameAndMsg.id %>')">
                                            <i class="fa fa-plus"></i>
                                        </td>
                                    </tr>
                                    <% if (nameAndMsg.messages && Array.isArray(nameAndMsg.messages)) { %>
                                        <% nameAndMsg.messages.forEach((msg) => { %>
                                            <tr>
                                                <td>
                                                    <textarea readonly oncontextmenu="msg_right_click(this)" placeholder="Enter a new message" type="text" class="form-control" onkeyup="debouncedEditMsg(this, '<%= nameAndMsg.id %>')" id="<%= msg.id %>"><%= msg.message %></textarea>
                                                </td>
                                            </tr>
                                        <% }); %>
                                    <% } %>
                                </table>
                            </td>
                            <td>
                                <button class="action-button delete-msg-button" onclick="deleteName(this, '<%= nameAndMsg.id %>')">
                                    <i class="fa fa-trash"></i>
                                </button>
                                <!-- <button class="btn btn-sm btn-light" onclick="openModal()">
                                    <i class="fa fa-cog"></i>
                                </button> -->
                            </td>
                        </tr>
                    <% }); %>
                <% } %>
                <tr>
                    <td colspan="3" class="text-center" style="transform: rotate(0);">
                        <button onclick="this.remove(); document.getElementById('new-name-form').style.display='block';" class="btn btn-sm btn-light px-5 stretched-link" onclick="openModal()">
                            Add New Name
                        </button>
                        <form id="new-name-form" style="display:none" onsubmit="addName(event)">                            
                            <div class="input-group mt-1 mb-1">
                                <input class="form-control" type="text" id="new-name" placeholder="Enter a new name" required>
                                <button class="btn btn-sm btn-success" type="submit">Add Name</button>
                            </div>
                        </form>
                    </td>
                </tr>
            </tbody>
        </table>
    </div>

    <div id="floating_context_menu">
        <ul>
            <li>
                <button class="btn btn-sm btn-light context-menu-item" onclick="make_editable()">
                    <i class="fa fa-edit"></i> Edit
                </button>
            </li>
            <li>
                <button class="btn btn-sm btn-light context-menu-item" onclick="delete_msg()">
                    <i class="fa fa-trash"></i> Delete
                </button>
            </li>
        </ul>
    </div>

    <script>
        function logout() {
            localStorage.removeItem('token');
            document.cookie = 'token=; path=/; expires=Thu, 01 Jan 1970 00:00:00 UTC;';
            window.location.href = '/logout';
        }

        function addName(e) {
            e.preventDefault();
            var name = document.getElementById('new-name').value;
            var token = localStorage.getItem('token');
            fetch('/auth/add_name', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${token}`
                },
                body: JSON.stringify({ username: "<%= user.username %>", name })
            })
            .then(response => {
                if (response.status === 200) {
                    window.location.href = '/dashboard';

                    // // Get the table element
                    // var table = document.getElementById("names_table");

                    // // Create a new row
                    // var row = table.insertRow(-1);

                    // // Add the name, message, and actions to the row
                    // row.innerHTML = `
                    //     <td>${name}</td>
                    //     <td>
                    //         <table class="table table-borderless mb-0 table-sm table-hover">
                    //             <tr>
                    //                 <td class="text-center">
                    //                     <button class="btn btn-sm btn-light">
                    //                         <i class="fa fa-plus"></i>
                    //                     </button>
                    //                 </td>
                    //             </tr>
                    //         </table>
                    //     </td>
                    //     <td>
                    //         <button class="action-button delete-msg-button">
                    //             <i class="fa fa-trash"></i>
                    //         </button>
                    //         <button class="btn btn-sm btn-light">
                    //             <i class="fa fa-cog"></i>
                    //         </button>
                    //     </td>
                    // `;

                    // // Create a new cell
                    // var cell = row.insertCell(0);

                    // // Add the name to the cell
                    // cell.textContent = name;
                } else {
                    return response.json();
                }
            })
            .then(data => { //this runs if the response is not 200
                if (data) {
                    alert(data.message);
                }
            })
            .catch(error => console.error('Error:', error));
        }


        const settings_modal = document.getElementById('settings');
        
        function openModal() {
            settings_modal.classList.add('open');
            settings_modal.classList.remove('close');
            settings_modal.style.display = 'block';
        }
        
        function closeModal() {
            settings_modal.classList.remove('open');
            settings_modal.classList.add('close');
            settings_modal.addEventListener('animationend', () => {
                // This will be executed after the animation
                settings_modal.style.display = 'none';
            }, {once: true}); // The listener is removed after executing once
        }

        function deleteName(ref, name_id) {
            if (!confirm('Are you sure you want to delete this name and all the messages it contains?')) {
                return;
            }
            fetch('/auth/delete_name', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ name_id })
            })
            .then(response => {
                if (response.status === 200) {
                    ref.parentElement.parentElement.remove();
                } else {
                    return response.json();
                }
            })
            .then(data => {
                if (data) {
                    alert(data.message);
                }
            })
            .catch(error => console.error('Error:', error));
        }

        //click anywhere outside of the modal to close it
        window.onclick = function(event) {
            var modal = document.getElementById('settings');
            if (event.target == modal) {
                closeModal();
            }
        }

        // Settings Tabs
        document.querySelectorAll('#settings-nav li a').forEach((tab, index) => {
            tab.addEventListener('click', (e) => {
                e.preventDefault();

                // Remove active class from all tabs
                document.querySelectorAll('#settings-nav li a').forEach((tab) => {
                    tab.classList.remove('active');
                });

                // Add active class to clicked tab
                e.target.classList.add('active');

                // Hide all tab content
                document.querySelectorAll('.tab-content').forEach((content) => {
                    content.style.display = 'none';
                });

                // Show clicked tab content
                document.querySelector(e.target.getAttribute('href')).style.display = 'block';
            });

            // Automatically click on the first tab
            if (index === 0) {
                tab.click();
            }
        });

        function changePassword(){
            event.preventDefault();
            var currentPassword = document.getElementById('current-password').value;
            var newPassword = document.getElementById('new-password').value;
            var confirmPassword = document.getElementById('confirm-password').value;
            // Check if new password and confirm password match
            if (newPassword !== confirmPassword) {
                alert('New password and confirm password do not match');
                return;
            }
            var token = localStorage.getItem('token');
            fetch('/auth/change_password', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${token}`
                },
                body: JSON.stringify({ username: "<%= user.username %>", currentPassword, newPassword })
            })
            .then(response => {
                if (response.status === 200) {
                    alert('Password changed successfully');
                    window.location.href = '/dashboard';
                } else {
                    return response.json();
                }
            })
            .then(data => {
                if (data) {
                    alert(data.message);
                }
            })
            .catch(error => console.error('Error:', error));
        }

        async function add_msg(ref, name_id){
            var table = ref.closest('table');
            var row = table.insertRow(1); // Insert the new row as the first row
            var cell = row.insertCell(0);
            var temp_id = Math.floor(Math.random() * 1000);
            cell.innerHTML = '<textarea type="text" oncontextmenu="msg_right_click(this)" class="form-control" onkeyup="debouncedEditMsg(this, \'' + name_id + '\')" id="msg_' + temp_id + '" placeholder="Enter a new message"></textarea>';
            await fetch('/auth/add_message', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ name_id })
            }).then(response => {
                return response.json();
            }).then(data => {
                if (data) {
                    const new_msg_id = data.new_msg_id;
                    if (new_msg_id) {
                        document.getElementById('msg_' + temp_id).id = new_msg_id;
                    }
                }
            }).catch(error => console.error('Error:', error));
        }

        function debounce(func, delay) {
            let debounceTimer;
            return function() {
                const context = this;
                const args = arguments;
                clearTimeout(debounceTimer);
                debounceTimer = setTimeout(() => func.apply(context, args), delay);
            }
        }

        function editMsg(ref, name_id){
            var msg_id = ref.id;
            var message = ref.value;
            fetch('/auth/edit_message', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ name_id, msg_id, message })
            }).then(response => {
                if (response.status == 200) {
                    toastr.success('Message saved');
                }
                else {
                    return response.json();
                }
            }).then(data => {
                if (data) {
                    toastr.error(data.message);
                }
            }).catch(error => console.error('Error:', error));
        }

        function msg_right_click(ref){
            var context_menu = document.getElementById('floating_context_menu');
            context_menu.style.display = 'block';
            context_menu.style.left = event.pageX + 'px';
            context_menu.style.top = event.pageY + 'px';
            context_menu.msg_id = ref.id;
            event.preventDefault();

            // Add an event listener to the window
            window.addEventListener('click', function(event) {
                // If the clicked element is not the context menu or a descendant of it
                if (!context_menu.contains(event.target)) {
                    // Hide the context menu
                    context_menu.style.display = 'none';
                }
            });
        }

        function make_editable(){
            var context_menu = document.getElementById('floating_context_menu');
            var msg_id = context_menu.msg_id;
            var msg = document.getElementById(msg_id);
            msg.readOnly = false;
            msg.focus();
            context_menu.style.display = 'none';
        }

        function delete_msg(){
            if (!confirm('Are you sure you want to delete this message?')) {
                return;
            }
            var context_menu = document.getElementById('floating_context_menu');
            var msg_id = context_menu.msg_id;
            context_menu.style.display = 'none';
            var msg = document.getElementById(msg_id);
            var name_id = msg.closest('.name_row').id;
            fetch('/auth/delete_message', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ name_id, msg_id })
            }).then(response => {
                if (response.status == 200) {
                    msg.closest('tr').remove();
                    toastr.success('Message deleted');
                }
                else {
                    return response.json();
                }
            }).then(data => {
                if (data) {
                    toastr.error(data.message);
                }
            }).catch(error => console.error('Error:', error));
        }

        const debouncedEditMsg = debounce(editMsg, 500);

    </script>

    <%- include('footer') %>
</body>

</html>
